openapi: 3.0.3
info:
  version: "2.1"
  title: "Rebilly Products API"
  contact:
    name: "Rebilly API Support"
    url: "https://www.rebilly.com/contact/"
    email: "integrations@rebilly.com"
  license:
    name: "Rebilly"
    url: 'https://www.rebilly.com/api-license/'
  termsOfService: 'https://www.rebilly.com/terms-of-use/'
  x-logo:
    url: 'https://rebilly-core.redoc.ly/rb_apiLogo.svg'
    backgroundColor: '#0033A0'
  description: |
    # Introduction
    This document covers APIs for our products.

    The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
    resource URLs.  It returns HTTP response codes to indicate errors.  It also
    accepts and returns JSON in the HTTP body.  You can use your favorite
    HTTP/REST library for your programming language to use Rebilly's API, or
    you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
    or [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).

    # Authentication
    When you sign up for an account, you are given your first API key.
    You can generate additional API keys, and delete API keys (as you may
    need to rotate your keys in the future). You authenticate to the
    Rebilly API by providing your secret key in the request header.

    Rebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.
    - [Secret API key](#section/Authentication/SecretApiKey): used for requests made from the server side. Never share these keys. Keep them guarded and secure
    - [Publishable API key](#section/Authentication/PublishableApiKey): used for requests from the client side.
    - [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time

    Never share your secret keys. Keep them guarded and secure.

    <!-- ReDoc-Inject: <security-definitions> -->

    # SDKs

    ## Javascript SDK

    Installation and usage instructions can be found [here](https://docs.rebilly.com/docs/developer-docs/sdks).
    SDK code examples are included in these docs.

    ## PHP SDK
    For all PHP SDK examples provided in this spec you will need to configure `$client`.
    You may do it like this:

    ```php
    $client = new Rebilly\Client([
        'apiKey' => 'YourApiKeyHere',
        'baseUrl' => 'https://api.rebilly.com',
    ]);
    ```

    # Using filter with collections
    Rebilly provides collections filtering. You can use `?filter` param on collection to define which records should be shown in the response.

    Here is filter format description:

    - Fields and values in filter are separated with `:`: `?filter=firstName:John`.

    - Fields in filter are separated with `;`: `?filter=firstName:John;lastName:Doe`.

    - You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`.

    - To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,Bob`. This filter rule will exclude all Johns and Bobs from the response.

    - You can use range filters like this: `?filter=amount:1..10`.

    - You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`.

    - You can create some [predefined values lists](https://user-api-docs.rebilly.com/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`.

tags:
  - name: AML
    description: >-
      AML, also known as Anti-Money-Laundering is an endpoint that searches
      multiple PEP, Sanctions, and Adverse Media lists for listed identities or
      media for screening purposes. Used during some transaction processing and
      on Contact creation, it helps determine whether someone is blocklisted or
      has political or economic sanctions against them.
  - name: API Keys
    description: >-
      Always keep your API Keys private. When creating your API keys, you can
      restrict them to a given set of permissions.

      In addition to your API Keys, you may use JSON Web Tokens (JWT) to
      authenticate to the API.  See our
      [Sessions](https://user-api-docs.rebilly.com/#tag/JWT-Session) resource
      for more information.
  - name: Activity Feed
    description: Activity Feed is holding various events that occurred in the app.
  - name: Authentication
    description: >-
      When you sign up for an account, you are given your first API key.

      You can generate additional API keys, and delete API keys (as you may need
      to rotate your keys in the future). You authenticate to the Rebilly API by
      providing your secret key in the request header.


      Rebilly offers three forms of authentication:  private key, JSON Web
      Tokens, and public key.

      - private key: authenticates each request by searching for the presence of
      an HTTP header: REB-APIKEY.

      - JWT: authenticates each request by the HTTP header: Authorization.

      - public key: authenticates by the HTTP header: REB-AUTH (read more on
      this below).


      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can
      control the specific granular permissions and expiration for that JWT.  We
      call our resource for generating JWT [Sessions](#tag/Sessions).


      Rebilly also has a client-side authentication scheme that uses an apiUser
      and HMAC-SHA1 signature (only for the Tokens resource), so that you may
      safely create tokens from the client-side without compromising your secret
      keys.


      Never share your secret keys. Keep them guarded and secure.

      The client-side authentication scheme uses one HTTP header named REB-AUTH.
  - name: Balance transactions
    description: |-
      Balance transactions API.

      This API is experimental and not guaranteed to be backward compatible.
  - name: Billing Portals
    description: >-
      Customer billing portals can be configured here. You can customize various
      options that appear on your billing portals.
  - name: Blocklists
    description: >-
      Your blocklists contains values of customerIds, email addresses,
      ipAddresses, bank identification numbers, countries or payment cards that
      you do NOT want to do business with. They are a good tool for managing
      risk. A blocklist entry that expires after a period of time we call a
      greylist.
  - name: Broadcast Messages
  - name: Checkout Forms
    description: >-
      Hosted checkout forms can be configured here. You can customize various
      options that appear on your hosted checkout forms.
  - name: Coupons
    description: >-
      Coupons allows to apply different types of discounts to Invoices, Orders
      and Plans. Redeemed Coupons will be applied only to Invoices with the same
      currency.
  - name: Custom Fields
    description: >-
      Create additional custom fields for particular resources.  You may name,
      describe, and determine the type of the schema.
  - name: Customer Authentication
    description: >-
      Create authentication credentials, login, logout, and verify your
      customers.
  - name: Customers
    description: >-
      Customers are your customers, sometimes known as accounts, clients,
      members, patrons, or players in other systems.
  - name: Customers Timeline
    description: >-
      The customers timeline keeps an audit trail of changes and activity for
      each customer.
  - name: Data Exports
    description: Data exports.
  - name: Disputes
    description: Handle disputes (chargebacks and retrievals).
  - name: Email Credentials
    description: Get and create SMTP credential hashes.
  - name: Email Delivery Settings
  - name: Email Messages
  - name: Email Notifications
  - name: Experian credentials
  - name: Fees
    description: |-
      Buy and sell fees.
      This API is experimental and not guaranteed to be backward compatible.
  - name: Files
    description: >-
      A File is an entity that can store a physical file and some metadata. It
      also provides an easy access to its size, mime-type, user-defined tags and
      description thus allowing easy sorting and searching among stored files.

      There are several methods of file uploading available: multipart/form-data
      encoded form, RAW POST (by sending file contents as POST body), fetching
      from URL (by providing the file URL via 'url' param) Attachment is an
      entity that is used to link a File to one or multiple objects like
      Customer, Dispute, Payment, Transaction, Order, Plan, Product, Invoice,
      Note. That allows to quickly find and use files related to those specific
      entities.
  - name: Gateway Accounts
    description: >-
      Gateway accounts connect payment request to third party networks and
      platforms.
  - name: Histograms
    description: Histograms are for particular kinds of reports with cohorts and periods.
  - name: Integrations
  - name: Invoices
    description: >-
      Invoices leave a record for both you and your customer of the products
      sold.
  - name: JWT Session
    description: >-
      A session contains a token, which is a JSON Web Token.  The token is
      created with a user's signin credentials.


      This token can be used to authenticate to the API.  In addition, the
      session can be set to expire at a particular time. Use the token to then
      authenticate for further requests to the Rebilly API.


      The token should be kept private, but could be stored on the user's
      browser client to simulate a "session".
  - name: KYC Documents
    description: >-
      Customer KYC files uploaded on behalf of a customer, tagged with a
      document type and submitted for validation.
  - name: Lists
    description: >-
      Lists contain sets of values and may be referenced within Rules criteria.


      List order may not be maintained and duplicates may be removed.


      You may grant permissions to edit Lists to different people than those who
      can edit Rules.

      It may be useful if your workflow involves frequent updates to value sets
      used in criteria.
  - name: Memberships
    description: |-
      Membership describe the relationships between organizations and users.
      For example, one user could have more than one organization.
  - name: Metadata
  - name: Orders
    description: >-
      An order applies a plan's template to create invoice(s) for a customer,
      optionally at the appropriate scheduled intervals. A subscription order
      may also determine if the payment is collected automatically (with autopay
      set true).
  - name: Organizations
    description: >-
      Organization is an entity that represents you, or your company, as a
      merchant. You can have multiple organizations.


      Note: Organizations are shared between "Live" and "Sandbox" environments.
  - name: Payment Cards
    description: >-
      Payment cards are a type of payment instrument used for credit and debit
      card sales.
  - name: Payment Instruments
    description: >-
      The Payment Instrument allows you to accept a variety of payment methods
      through a single API.
  - name: Payment Tokens
    description: >-
      Payment tokens are used to reduce the scope of PCI DSS compliance.  A
      payment token can be made using a different authentication scheme (refer
      to the public key authentication scheme in the Authentication section),
      which allows you to create a payment token directly from the browser,
      bypassing the need to send sensitive cardholder info to your servers.  We
      recommend using this with our Rebilly.js library, which helps you wire a
      form into this API resource and create payment tokens.
  - name: Plans
    description: >-
      Plans are a template for making a subscription.  For example, you may have
      a plan that has a 30-day free trial followed by a recurring charge of
      $19.95 per month until canceled.  The combination of the plan and a
      request to make an order will apply those instructions to create the
      invoices according to the plan's schedule.
  - name: Products
    description: >-
      A product describes what you sell (goods or services). A product
      determines how what you sell appears on invoices and receipts.

      The pricing for products is set in Plans.  One product can have many
      plans.
  - name: Profile
    description: A Profile represents the person currently logged in to Rebilly.
  - name: Rebilly API
    description: >-
      The Rebilly API is the main API commonly integrated by 3rd parties.  You
      may see the [Rebilly API Documentation
      here](https://api-reference.rebilly.com).
  - name: Reports
    description: >-
      Retrieve summary information about your customers, subscriptions,
      transactions, and more.
  - name: Reports API
    description: >-
      The Rebilly Reporting API is currently experimental.  You may see the
      [Reports API Documentation here](https://reports-api-docs.rebilly.com).
  - name: Reset password
    description: >-
      When a password reset is requested, an email with a token is sent. Upon
      receiving the email the user then needs to click a link and choose a new
      password.
  - name: Roles
    description: >-
      Roles are an implementation of the general hierarchical RBAC. A senior
      role inherits all of it's juniors' ACLs plus its own ACL.

      Junior roles are not influenced by the senior role.
  - name: Rules
    description: >-
      "Don't conform to the rules. Create the rules."

      Rather than adapt your workflow and business, Rebilly can align with your
      business objectives by giving you the power to automate certain behaviors
      when key events happen.

      You can use this to your advantage to mitigate risk, maximize conversions
      and minimize costs.

      You have the controls at your fingertips here. If you need more control,
      or help dialing in on a strategy, feel free to contact us.


      When an event happens, it triggers the evaluation of conditions (that you
      set up), in order from top to bottom. If the condition is met, the
      corresponding actions are executed.

      The conditions continue to be checked until either all of the conditions
      have been executed, or a special "stop" action is executed.
  - name: Search
    description: 'Search data including customers, invoices, orders, transactions and more.'
  - name: Segments
    description: >-
      Segments are grid UI settings that can be shared with other users. They
      are like a custom view.

      For example, one may set up a transaction grid to show specific columns
      and sort a certain way, and share it with others in their organization.
  - name: Shipping Zones
    description: >-
      A shipping zone contains regions and countries that you ship to. Each
      shipping zone has its own shipping rates.
  - name: Status
    description: Check the status of the Rebilly API (no authentication required).
  - name: Tags
    description: Tag customers to better organize your data.
  - name: TaxJar credentials
  - name: Taxes
    description: >-
      You can map a product to a tax category.  The tax category is used by tax
      providers to calculate taxes for invoices.
  - name: Tracking
    description: >-
      Tracking is a layer for accessing all the activity (API requests,
      subscriptions, webhooks, events, etc.), thus providing easier debugging
      and issues auditing.
  - name: Transactions
    description: Get and refund transactions.
  - name: Users
    description: >-
      A User represents a person who can login to Rebilly, and take actions
      subject to their granted permissions.
  - name: Webhook Credentials
    description: Get and create Webhook credential hashes.
  - name: Webhooks
    description: >-
      Webhooks are designed to notify your systems when certain/all registered
      events happen in near real-time. They allow you to collect information
      about those events. Rebilly can send these information via POST to an URL
      of your choice.
  - name: Websites
    description: >-
      A Website represents the website/brand that customers interact with... You
      could think of it like a brand.  For example, Nestle owns Perrier and
      Purina and PowerBar.


      We recognize that some enterprises have more than one website (or brand).
      The website is related to each invoice and each payment gateway account.
      This feature would allow you to have gateway accounts that are related to
      multiple websites, or exclusive to particular websites.  And gives you
      more control over your business.


x-tagGroups:
  - name: Payments
    tags:
      - Customers
  - name: Billing
    tags:
      - Customers
  - name: Risk management
    tags:
      - Customers

security:
  - SecretApiKey: []
  - JWT: []

servers:
  - url: 'https://api-sandbox.rebilly.com'
    description: Sandbox Server.
  - url: 'https://api.rebilly.com'
    description: Live Server.

components:
  securitySchemes:
    JWT:
      $ref: components/securitySchemes/JWT.yaml
    PublishableApiKey:
      $ref: components/securitySchemes/PublishableApiKey.yaml
    SecretApiKey:
      $ref: components/securitySchemes/SecretApiKey.yaml

paths:
  '/customers/{customerId}/summary-metrics':
    $ref: './paths/customers@{customerId}@summary-metrics.yaml'
