type: object
required:
  - type
  - plan
properties:
  id:
    type: string
    description: ID of the order item.
    readOnly: true
    maxLength: 50
    example: ord_01GYJPRKHBD6ZYHH897QCJMBS4
  type:
    description: Specifies the type of order.
    type: string
    x-basic: true
    enum:
      - one-time-sale
  status:
    description: Status of the one-time order.
    type: string
    readOnly: true
    enum:
      - pending
      - abandoned
      - completed
      - canceled
  currency:
    description: Currency of the order.
    readOnly: true
    $ref: ./CurrencyCode.yaml
  plan:
    type: object
    description: Plan of the order item.
    properties:
      id:
        type: string
        description: ID of the order item plan.
        readOnly: true
        maxLength: 50
        example: ord_itm_0YVJ6172Q2CXW9VP7KJMKHCMMX
      planId:
        description: ID of the plan.
        deprecated: true
        x-basic: true
        type: string
        maxLength: 50
        example: plan_0YV7DENSVGDBW9S71XZNNYYQ0X
      quantity:
        description: Number of product units in the specified plan.
        type: integer
      quantityFilled:
        description: Number of filled product units.
        type: integer
      planDetails:
        description: Details of the plan.
        anyOf:
          - $ref: ./OriginalPlan.yaml
          - $ref: ./FlexiblePlan.yaml
      usageLimits:
        type: object
        description: |-
          Specifies the soft and hard usage limit thresholds for an item with a metered billing plan.
          This value is ignored when the plan is not metered.
        properties:
          softLimit:
            type: object
            description: |-
              Defines thresholds for notification purposes.
              For example, to notify the customer that their usage is near the hard limit of their metered billing plan.
              This notification informs the customer so that they can upgrade their plan before the hard limit is reached.
              When the reported usage reaches 75%, 90%, and 100% of the configured limit a specific event is fired.
              To notify the customer, a webhook and notification can be configured for this event.
              This field is useful for accounting and customer success purposes.
              The usage of metered billing plans can still be reported if the soft limit is reached.
            minProperties: 1
            maxProperties: 1
            properties:
              quantity:
                type: integer
                description: Usage limit quantity.
                minimum: 1
              amount:
                type: number
                format: double
                description: Usage limit amount in the currency of the order.
                minimum: 0.01
          hardLimit:
            type: object
            description: |-
              Defines a limit where the customer can no longer use the service.
              Hard limits are used in addition to soft limits.
              When a soft limit is reached,
              a customer may receive a notification
              but the service can still be provided up to the hard limit value so that the customer can upgrade their plan.
              When the reported usage reaches the configured limit,
              a specific event is triggered.
              To notify the customer in the merchant system,
              or block a service,
              a webhook and notification can be configured for this event.
              When the total usage reaches the hard limit quantity,
              or amount values,
              metered billing plan usages can no longer be reported.
            minProperties: 1
            maxProperties: 1
            properties:
              quantity:
                type: integer
                description: Usage limit quantity.
                minimum: 1
              amount:
                type: number
                format: double
                description: Usage limit amount in the currency of the order.
                minimum: 0.01
      revision:
        type: integer
        readOnly: true
        description: Revision number that increments with each overriding change to this specific plan item.
      isModified:
        type: boolean
        readOnly: true
        description: Specifies if the plan information is modified for this subscription.
      isGrandfathered:
        type: boolean
        readOnly: true
        description: Specifies if the current plan revision number is greater than the plan item revision number.
  voidTime:
    description: Date and time when the order is voided.
    type:
      - 'string'
      - 'null'
    format: date-time
    readOnly: true
  abandonTime:
    type:
      - 'string'
      - 'null'
    description: |-
      Date and time when the pending order is automatically abandoned.
      If this value is not passed during order creation,
      a [pending order TTL](https://www.rebilly.com/catalog/all/Organizations/PatchOrganization/#!t=request&path=settings/billing/pendingOrderTtl) setting is used to calculate the value.
    format: date-time
  couponIds:
    type:
      - 'array'
      - 'null'
    description: |-
      List of coupons to redeem on the customer and restrict to this order.

      For more information, see [Coupons](https://www.rebilly.com/docs/settings/coupons-and-discounts/).

      This parameter uses the following logic:

      - If this parameter is not supplied, applied coupons are not changed.
      - If an empty array is supplied, all applied coupon redemptions are canceled.
      - If a list of coupons is supplied, unapplied coupons in the list are applied.
        Coupons that have already been applied do not change state.
        Applied coupons that are not supplied in list are canceled.

      If the list of applied coupons on a pending order is changed by this parameter during an order update, the invoice for the order is reissued.
    writeOnly: true
    items:
      type: string
      description: ID of the coupon.
  shipping:
    $ref: ./Shipping.yaml
  revision:
    description: |-
      Number of times the order data has been modified.

      The revision is useful when analyzing webhook data to determine if the
      change takes precedence over the current representation.
    type: integer
    readOnly: true
  riskMetadata:
    example: null
    description: |-
      Risk metadata.
      If this value is `null`, this field uses risk metadata that is captured when creating the payment token.
    oneOf:
      - $ref: ./RiskMetadata.yaml
      - type: 'null'
  customFields:
    $ref: ./ResourceCustomFields.yaml
  createdTime:
    $ref: ./CreatedTime.yaml
  updatedTime:
    $ref: ./UpdatedTime.yaml
