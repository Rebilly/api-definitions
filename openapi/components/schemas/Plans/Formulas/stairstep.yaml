type: object
required:
  - brackets
  - formula
properties:
  formula:
    type: string
    description: |-
      Price formula that determines which algorithm is used to calculate the invoice price based on the following factors:

      - Quantity in the order.
        This value may be variable if you are charging based on usage.
        If you are not charging based on usage,
        this value is determined when an order is created.

      - Price of the quantity range.
        Some formulas set a price based on defined product quantity ranges.

      For more information, see [Price formulas](https://www.rebilly.com/docs/billing/pricing-formulas/).
    enum:
      - stairstep
  brackets:
    description: |-
      Use this formula to charge for units that are sold in specific quantity ranges.

      For example, a bank charges a merchant based on the number of transactions they complete each month.

      Price total | Max quantity | Description
      ------------|--------------|------------
      $50         | 1000         | Up to 1000 transactions
      $100        | 1500         | Between 1000 and 1500 transactions
      $200        | 3000         | Between 1500 and 3000 transactions
      $500        | null         | More than 3000 transactions

      - If the merchant completes 900 transaction in a month, they are charged $50.
      - If the merchant completes 1001 transaction in a month, they are charged $100.
      - If the merchant completes 2500  transaction in a month, they are charged $200.
      - If the merchant completes more than 3000 transaction in a month, they are charged $500.
    type: array
    minItems: 1
    items:
      type: object
      properties:
        price:
          description: |-
            Price of the quantity range.
            If the value of this field is `0`, the product is free.
          type: number
          format: double
          example: 99.95
        maxQuantity:
          description: |-
            Maximum permitted unit quantity.
            If this value is `null`, no limit is in place.

            This value starts from the end of the previous quantity range.
            If there are no previous quantity ranges,
            this value starts at 1.
          type: integer
          nullable: true
          example: 1
          minimum: 1
          maximum: 65535
